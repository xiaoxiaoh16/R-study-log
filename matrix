A matrix is a collection of data elements arranged in two dimensional rectangular layout.

1. we reproduce a memory representation of the matrix in R with the matrix function. The data elements must be of the same basic type.

	EXG:
	A=matrix(
		c(2,4,3,1,5,7),		# the data elements
		nrow=2,				# number of rows
		ncol=3,				# number of columns
		byrow=TRUE)			# fill matrix by rows

	A						# print the matrix

	1). An element at the mth row, nth column of A can be accessed by the expression A[m,n]
	2). The entire mth row A can be extract as A[m,]
	3). similarly the entire nth column A can be extracted as A[,n]
	4). we can also extract more than one rows or columns at a time. A[,C(1,3)]
	5). If we assign names to the rows and columns of the matrix, then we can access the elements by names
		dimnames(A)=list(
			c("row1", "row2"),			# row names
			c("col1", "col2", "col3"))	# column names

		A					# print A
		A["rows2", "col3"]	# element at 2nd row, 3rd column

2. Matrix Construction, when we construct a matrix directly with data elements, the matrix content is filled along the columen orientation by default.
	1). Transpose
		we construct the transpose of a matrix by interchanging its columns and rows with the function t
		t(B)
	2). combing matrices
		The columns of two matrices having the same number of rows can be combinded into a large matrix.
		C=matrix(
			c(7,4,2),
			nrow=3,
			ncol=1)
		cbind(B,C)

		Similarly, we can combine the rows of two matrices if they have the same number of columns with the rbind function.
		D=matrix(
			c(6,2)
			nrow=1,
			ncol=2)
		rbind(B,D)

	3). Deconstruction
		we can deconstruction a matrix by applying the c function, which conbine all the column vectors into one


